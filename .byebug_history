c
params[:work_days]
n
params[:work_days]
c
exit
rules
@setting
self
c
self
exit
rules
c
benchmark_active_rec/benchmark_sql
benchmark_sql/benchmark_active_rec
benchmark_active_rec
benchmark_sql
exit
rules["off_days"].include?("6")
rules["off_days"].include?(6)
rules["off_days"]
day_number
date
c
exit
rules["work_days"]
rules["work_days]
rules
c
last_day == nil || last_day < Date.today
n
exit
Workday.pluck(:workdate).last
Workday.pluck(:workdate)
Workday
Workday.pluck(:workdate).sort.last < Date.today
exit
 Date.pluck(:workdate).sort.last < Date.today
c
params["work_days"]
params[:work_days]
params[:work_days[
params
c
params
c
exit
@setting.rules["off_days"]
@setting.rules[:off_days]
@setting.rules.off_days
@setting.rules
@setting
Setting.all
@setting
c
params[:half_days]
params
c
params
c
params
c
filtered_staffs
c
contract
c
filtered_staffs
c
Contract.where("commencement_date > ? AND end_date < ?",params[:date_from],params[:date_to])
Contract.where("commencement_date > ? && end_date < ?",params[:date_from],params[:date_to])
Contract.where("commencement_date > ? & end_date < ?",params[:date_from],params[:date_to])
Contract.where("commencement_date > ?",params[:date_from])
Contract.where("commencement_date > ?, end_date < ?",params[:date_from],params[:date_to])
Staff.where("commencement_date > ?, end_date < ?",params[:date_from],params[:date_to])
contract
contract.save
contract = Contract.new(commencement_date:"2016-10-09",end_date:"2016-10-10")
Contract.new(commencement_date:"2016-10-09",end_date:"2016-10-10")
params
Contract.new()
staffs
c
params
c
params
\params
c
params[:date_to]
params
parans
request
reqeust
data
params
c
Staff.find(contract.staff_id)
contract.staff_id
contract.staf_id
contract
c
n
c
Contract.where(status:1)
Contract.where("status = ?", 1)
Contract.where("status = ?", "active")
Contract.where("status = ?", 1)
Contract.where(status:"active")
Contract.last.status=="active"
Contract.last.status
Contract.last
Contract.all
Contract.where(status:"active")
c
Contract.first.delete
Contract.all
contract
ccontract
c
Invite.all
c
Invite.new(email:"test1@test.com").invite!
Invite.new(email:"test@test.com").invite!
InvitationMailer.invite(invitation)
invitation
c
invitation
c
invitation
mail
c
mail
c
InvitationMailer.all
InvitationMailr.all
mail
Invite.all
invite
c
@invite
c
Invite.delete_all
Invite.all
c
Invite.all
c
Invite.all
@invite
c
@invite.invite_code.class
@invite.invite_code
c
@invite
Invite.all
c
Invite.all
@invite
c
exit
invite
invite.save
c
exit
user.category 
user.category = 4
user.save
user.category
c
leave_type_duplicate_true.save
leave_type_duplicate_true
c
LeaveType.all
leave_type_duplicate_true.save
leave_type_duplicate_true
c
@contract.status
@contract.status=1
@contract.status
@contract.status= 0
@contract.status= 2
@contract.status= 1
@contract.status
@contract.status="active"
@contract.status=2
@contract.status
c
params
exit
params
parmas
c
request.referrer
request
params
c
n
record.category == "staff" && user.nil?
n
c
record.category
record
c
authorize @user, :staff_invite_sign_up?
authorize @user, :staff_invite_sign_up
n
invite_code && @invite && @invite.email == @user.email
exit
@user
@user.email
@invite.email
@invite
invite_code
invite_code && @invite && @invite.email == @user.email
c
exit
request.original_url
request.referrer
request
c
n
c
User.last.delete
User.all
@user.errors.full_messages
@user.errors.full_message
@user.save.errors
@user.save.errors.full_messages
@user.save.errors.full_message
@user.save
@user
n
c
n
c
exit
invite_form
form
c
params
c
@invite
n
invite_code
n
c
flash
c
n
c
@user.errors
@user.save.error
@user.save.errors
@user.save
@user
n
invite_code && @invite && @invite.email == @user.email
